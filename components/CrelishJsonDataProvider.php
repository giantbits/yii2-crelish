<?php
/**
 * Created by PhpStorm.
 * User: devop
 * Date: 03.02.16
 * Time: 20:57
 */

namespace giantbits\crelish\components;

use Underscore\Parse;
use Underscore\Types\Arrays;
use yii\base\Component;
use yii\data\ArrayDataProvider;
use yii\helpers\FileHelper;
use yii\helpers\Json;
use yii\widgets\LinkPager;

class CrelishJsonDataProvider extends Component
{

  private $type;
  private $allModels;
  private $filter;
  private $definitions;

  public function __construct($type, $settings, $uuid)
  {
    $ds = DIRECTORY_SEPARATOR;
    $this->type = $type;

    if (!empty($uuid)) {
      $this->allModels[] = \yii\helpers\Json::decode(file_get_contents(\Yii::getAlias('@app/workspace/data/') . $ds . $type . $ds . $uuid . '.json'));

      $filePath = \Yii::getAlias('@app/workspace/data/elements') . DIRECTORY_SEPARATOR . $type . '.json';
      $this->definitions = Json::decode(file_get_contents($filePath), false);

      // Add core fields.
      $this->definitions->fields[] = Json::decode('{ "label": "UUID", "key": "uuid", "type": "textInput", "visibleInGrid": true, "rules": [["string", {"max": 128}]], "options": {"disabled":true}}', false);
    } else {
      $this->allModels = $this->parseFolderContent($this->type);
    }

    if (Arrays::has($settings, 'filter')) {
      $this->filterModels($settings['filter']);
    }

    if (Arrays::has($settings, 'sort')) {
      $this->sortModels($settings['sort']);
    }

    parent::__construct(); // TODO: Change the autogenerated stub
  }

  private function filterModels($filter)
  {

    foreach ($filter as $key => $value) {
      $this->allModels = Arrays::filterBy($this->allModels, $key, $value);
    }
  }

  private function sortModels($sort)
  {
    $this->allModels = Arrays::sort($this->allModels, function ($model) use ($sort) {
      return $model[$sort['by']];
    }, $sort['dir']);
  }

  public function parseFolderContent($folder)
  {
    $filesArr = [];
    $allModels = [];

    $fullFolder = \Yii::$app->basePath . DIRECTORY_SEPARATOR . 'workspace' . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . $folder;

    $files = FileHelper::findFiles($fullFolder);
    if (isset($files[0])) {
      foreach ($files as $file) {
        $filesArr[] = $file;
      }
    }

    foreach ($filesArr as $file) {
      $content = file_get_contents($file);
      $modelArr = json_decode($content, true);
      $modelArr['id'] = $file;
      $allModels[] = $modelArr;
    }

    return $allModels;
  }

  public function all()
  {
    $provider = new ArrayDataProvider([
      'key' => 'id',
      'allModels' => $this->allModels,
      'pagination' => [
        'totalCount' => count($this->allModels),
        'pageSize' => 15,
        'forcePageParam' => true,
        //'route' => $_GET['pathRequested'],
        //'urlManager' => \Yii::$app->getUrlManager(),
      ],
    ]);

    $models = $provider->getModels();

    $pager = LinkPager::widget([
      'pagination' => $provider->getPagination(),
      'maxButtonCount' => 10
    ]);

    $result = ['models' => array_values($models), 'pager' => $pager];

    return $result;
  }

  public function one()
  {
    return $this->allModels[0];
  }

  public function definitions()
  {
    return $this->definitions;
  }
}
