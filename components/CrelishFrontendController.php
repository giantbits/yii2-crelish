<?php
/**
 * Created by PhpStorm.
 * User: devop
 * Date: 29.11.15
 * Time: 17:17
 */

namespace giantbits\crelish\components;

use giantbits\crelish\components\CrelisJsonDataProvider;
use yii;
use yii\base\Controller;
use Underscore\Types\Arrays;

class CrelishFrontendController extends Controller
{

  public $entryPoint;
  private $requestUrl;
  private $viewTemplate;

  public function init()
  {
    parent::init(); // TODO: Change the autogenerated stub

    // Set theme.
    $this->view->theme = new \yii\base\Theme([
      'pathMap' => ['@app/views' => '@app/themes/klangfarbe'],
      'basePath' => '@app/themes/klangfarbe',
      'baseUrl' => '@web/themes/klangfarbe',
    ]);

    // Force theming.
    $this->setViewPath('@app/themes/klangfarbe/' . $this->id);

    // Define entry point.
    $this->resolvePathRequested();
  }

  public function actionError()
  {
    $this->title = 'Error';
    Yii::$app->name = $this->title;

    $exception = Yii::$app->errorHandler->exception;

    if ($exception !== null) {
      return $this->render('error.twig', ['message' => $exception->getMessage()]);
    }
  }

  public function actionRun()
  {
    $ds = DIRECTORY_SEPARATOR;
    // 1. Determine entry point. (Hardcoded for now > type:page, slug:home, path:''
    // 2. Load entry point content.
    // 3. Assemble sub content from parent entry point content.

    // Set layout.
    $this->setLayout();

    // Set view template.
    $this->setViewTemplate();

    // Add content aka. do the magic.
    $data = yii\helpers\Json::decode(file_get_contents(\Yii::getAlias('@app/workspace/data/') . $ds . $this->entryPoint['type'] . $ds . $this->entryPoint['uuid'] . '.json'));

    // Process data and render.
    $data = $this->processContent($data);
    
    return $this->render($this->viewTemplate, ['data' => $data]);

  }

  private function processContent($data)
  {
    $processedData = [];
    $filePath = \Yii::getAlias('@app/workspace/elements') . DIRECTORY_SEPARATOR . $this->entryPoint['type'] . '.json';
    $elementDefinition = yii\helpers\Json::decode(file_get_contents($filePath), false);

    if ($data) {
      foreach ($data as $key => $content) {
        $fieldType = Arrays::find($elementDefinition->fields, function ($value) use ($key) {
          return $value->key == $key;
        });

        if (is_object($fieldType)) {
          $fieldType = $fieldType->type;
        }

        switch ($fieldType) {
          case 'dataList':
            $filterArray = null;
            $sortArray = null;

            if(!empty($content['filter'])) {
              foreach ($content['filter'] as $filter) {
                
                if(is_array($filter)) {
                   foreach($filter as $key => $value) {
                     $filterArray[$key] = $value;
                   }
                } else {
                  $queryValue = Yii::$app->getRequest()->getQueryParam($filter);
                  if(!empty($queryValue)) {
                    $filterArray[$filter] = $queryValue;
                  }  
                }                
              }
            }

            if(!empty($content['sort'])) {
              $sortArray['by'] = $content['sort']['by'];
              $sortArray['dir'] = $content['sort']['dir'];
            }
            
            // Generate data source.
            $dataProvider = new CrelishJsonDataProvider($content['source'],['filter' => $filterArray, 'sort'=>$sortArray]);
            $processedData[$key] = $dataProvider->raw();

            break;
          case 'matrixConnector':
            if (empty($processedData[$key])) {
              $processedData[$key] = [];
            }

            if ($content) {
              foreach ($content as $section => $subContent) {

                if (empty($processedData[$key][$section])) {
                  $processedData[$key][$section] = '';
                }

                foreach ($subContent as $subContentdata) {
                  $sourceData = new CrelishJsonDataProvider($subContentdata['type'], [], $subContentdata['uuid']);

                  // @todo: nesting again.
                  $sourceDataOut = $this->processContent($sourceData->one());

                  $processedData[$key][$section] .= $this->renderPartial($subContentdata['type'] . '.twig', ['data' => $sourceDataOut]);
                }
              }
            }

            break;
          default:
            $processedData[$key] = $content;
        }
      }
    }

    return $processedData;
  }

  private function resolvePathRequested()
  {
    $slug = $path = '';
    $type = 'page';
    $this->requestUrl = Yii::$app->request->getPathInfo();

    if (!empty($this->requestUrl)) {

      $keys = explode('/', $this->requestUrl);
      if (count($keys) > 1) {
        $path = $keys[0];
        $slug = str_replace(".html", "", $keys[1]);
      } else {
        $slug = str_replace(".html", "", $keys[0]);
      }
    }

    $entryDataJoint = new CrelishJsonDataProvider($type, ['filter' => ['slug' => $slug]]);
    $entryModel = $entryDataJoint->one();

    $this->entryPoint = ['type' => $type, 'slug' => $slug, 'path' => $path, 'uuid' => $entryModel['uuid']];
  }

  private function setLayout()
  {

    $ds = DIRECTORY_SEPARATOR;
    $path = Yii::$app->view->theme->basePath . $ds . 'layouts' . $ds . $this->entryPoint['slug'] . '.twig';

    if(file_exists($path)) {
      $this->layout = "@app/views/layouts/" . $this->entryPoint['slug'];
    } else {
      $this->layout = "@app/views/layouts/main";
    }
  }

  private function setViewTemplate()
  {
    $ds = DIRECTORY_SEPARATOR;
    $path = Yii::$app->view->theme->basePath . $ds . Yii::$app->controller->id . $ds . $this->entryPoint['slug'] . '.twig';
    $pathByType = Yii::$app->view->theme->basePath . $ds . Yii::$app->controller->id . $ds . $this->entryPoint['type'] . '.twig';

    if(file_exists($path)) {
        $this->viewTemplate = $this->entryPoint['slug'] . '.twig';
    } elseif(file_exists($pathByType)) {
        $this->viewTemplate = $this->entryPoint['type'] . '.twig';
    } else {
      $this->viewTemplate = 'main.twig';
    }
  }

}
